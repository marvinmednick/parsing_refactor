{
  "filename": "ansi_test.pdf",
  "metadata": {
    "Author": "Dave Wilson",
    "Comments": "",
    "Company": "CEA",
    "ContentType": "Document",
    "ContentTypeId": "0x010100503CC8EE3B346842B07CEA313CFCBFB2",
    "CreationDate": "D:20201029154648-04'00'",
    "Creator": "Acrobat PDFMaker 20 for Word",
    "Keywords": "",
    "ModDate": "D:20210627175536-07'00'",
    "Owner": "",
    "Producer": "Adobe PDF Library 20.12.80",
    "SPSDescription": "",
    "SourceModified": "D:20201029194603",
    "Status": "",
    "Subject": "",
    "Title": ""
  },
  "sections": [
    {
      "section_title": "1  SCOPE",
      "section_text": "This standard specifies baseline Device Security capabilities and related organizational Security \ncapabilities and recommendations for Devices and Device systems, including for individual \nconnected Devices, Endpoint Devices, components, hardware modules, chips, software, sensors \nor other operating components.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "2  DEFINITIONS AND ABBREVIATIONS",
      "section_text": "For the purposes of this document, the following definitions apply. \nAuthenticating  see Authentication. \nAuthentication  The process of verifying the Identity of an Entity. \nAuthenticator  Something the Claimant possesses and controls (typically a \ncryptographic module or password) that is used to authenticate \nthe Claimant’s Identity. See Authenticator in NIST SP 800-63-3 \n[14].  \nAuthorization   The process of verifying that a requested action or service is \napproved for a specific entity. See Authorization in NIST SP 800-\n152 [27]. \nAuthorized User   An Entity permitted to access or manipulate the product. \nAuthorizing  see Authorization. \nClaimant  A party whose Identity is to be verified using an Authentication \nprotocol. See Claimant in NIST SP 800-63-3 [14]. \nCommonly Available  Widely-available, inexpensive tools (such as common \nTools  screwdrivers) and free or inexpensive software. \nConfiguration   The specific hardware and software details, capacity or capability, \nand exactly what the system consists of, not including normal \nuser-accessible Device functions or controls. \nConsole Port  A local (i.e., not remote) physical, dedicated interface (whether \nwired or wireless) that provides capabilities of Remote \nManagement, Remote Monitoring or both. \nCredential  An object or data structure that authoritatively binds an Identity \n— via an identifier or identifiers — and (optionally) additional \nattributes to at least one Authenticator possessed and controlled \nby a Claimant. See Credential in NIST SP 800-63-3 [14]. \nCWE  Common Weakness Enumeration. CWE™ is a community-\ndeveloped list of common software Security weaknesses. It \nserves as a common language, a measuring stick for software \n1 \n \nCTA-2088 \nSecurity tools, and a baseline for weakness identification, \nmitigation and prevention efforts. \nDevice  A finished product, available to end-users in the last point in the \nPre-Market activity. A Device is usable for its intended functions \nwithout being embedded or integrated into any other product \nand is not a component. \nDevice Credential  A Credential where the Claimant is a Device. \nEndpoint  An Entity comprised of one or more components, addressable on \na network. \nEntity  An item with a recognizably distinct existence.1  \nEoL  End of Life (of an IoT Device). \nEoS  End of Service (of an IoT Device). \nIdentity  An inherent property of an Entity that distinguishes it from all \nother entities. An Identity needs to exist in a namespace to allow \nit to be referred to without ambiguity.2 \nInsecure  see Security. \nManufacturer  The Entity responsible for the creation of a Device. \nPost-Market  After release of the individual Device to the field (i.e., after it \nleaves the factory and goes into the distribution channel). \nCompare to Pre-Market. \nPre-Market  Prior to release of the individual Device to the market (e.g., \nbefore it leaves the factory and goes into the distribution \nchannel). Compare to Post-Market. \nProprietary Tools  Tools that are not Commonly Available Tools or Specialized Tools \ndue to restricted sales or use provisions, such as a special-\npurpose tool sold by a Device Manufacturer only to authorized \nrepair facilities. \nRemote Management  The facility or capability of configuring and managing a Device \nwithout physical access to the Device. \nRemote Monitoring  The facility or capability of monitoring a Device without physical \naccess to the Device. Compare to Remote Management. \nSecure  see Security. \n \n1 ISO/IEC, ISO/IEC 24760-1:2019 Information technology -- Security techniques -- A framework for identity \nmanagement -- Part 1: Terminology and concepts, May 2019, https://www.iso.org/standard/77582.html.    \n2 ISO/IEC/IEEE, ISO/IEC/IEEE 31320-2:2012 Information technology -- Modeling Languages -- Part 2: Syntax and \nSemantics for IDEF1X97 (IDEFobject), September 2012, https://www.iso.org/standard/60614.html.   \n2 \n \nCTA-2088 \nSecurity  Protecting information and information systems from \nunauthorized access, use, disclosure, disruption, modification or \ndestruction in order to provide— (A) integrity, which means \nguarding against improper information modification or \ndestruction, and includes ensuring information non-repudiation \nand authenticity; (B) confidentiality, which means preserving \nauthorized restrictions on access and disclosure, including means \nfor protecting personal privacy and proprietary information; and \n(C) availability, which means ensuring timely and reliable access \nto and use of information.3  \nSensitive Data  Data that, if extracted or observed by a third party, would \ncompromise system security (e.g., Credentials) or user privacy \n(e.g., personally identifiable information). \nSpecialized Tools  Commercially available tools that are not Commonly Available \nTools, including logic analyzers, oscilloscopes, debuggers, \ndecompilers, tools for tamper-resistant fasteners and similar \ntools. \nUser Authentication  see Authorized User. \nUser Credential  A Credential where the Claimant is an end-user. \nVulnerability  A software weakness found in the product for which an exploit \ncan exist such that it can be directly used by an attacker.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "3  REFERENCES",
      "section_text": "",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          3
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "3.1  Normative References",
      "section_text": "The following documents contain provisions that, through reference in this text, constitute \nnormative provisions of this standard.  At the time of publication, the editions indicated were \nvalid. All documents are subject to revision. Users of this document are cautioned that newer \neditions of the referenced documents might or might not be compatible.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          3
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "3.1.1  Normative Reference List",
      "section_text": "1.  National Institute of Standards and Technology (NIST) Special Publication 800-131A Rev. \n2, Transitioning the Use of Cryptographic Algorithms and Key Lengths, \nhttps://doi.org/10.6028/NIST.SP.800-131Ar2. \n2.  Internet Engineering Task Force (IETF) RFC 5905, Network Time Protocol Version 4: \nProtocol and Algorithms Specification, June 2010, https://tools.ietf.org/html/rfc5905. \n \n3 44 USC §3552(b)(3), available at https://uscode.house.gov/view.xhtml?req=granuleid:USC-prelim-title44-\nsection3552&num=0&edition=prelim. \n3 \n \nCTA-2088 \n3.  International Electrical and Electronics Engineers (IEEE) 1588-2008, IEEE Standard for a \nPrecision Clock Synchronization Protocol for Networked Measurement and Control \nSystems, March 2008, https://standards.ieee.org/standard/1588-2008.html. \n4.  IETF RFC 8915, Network Time Security for the Network Time Protocol, \nhttps://tools.ietf.org/html/rfc8915.  \n5.  IETF RFC 6066, Transport Layer Security (TLS) Extensions: Extension Definitions, \nhttps://tools.ietf.org/html/rfc6066. \n6.  NIST SP 800-52 Rev. 2, Guidelines for the Selection, Configuration, and Use of Transport \nLayer Security (TLS) Implementations, https://doi.org/10.6028/NIST.SP.800-52r2. \n7.  Open Web Application Security Project (OWASP), OWASP Top 10 – 2017: The Ten Most \nCritical Web Application Security Risks, https://owasp.org/www-project-top-\nten/OWASP_Top_Ten_2017/. \n8.  ICSA Labs, Firewall Certification Criteria Baseline Module – Version 4.2, \nhttp://www.icsalabs.com/sites/default/files/FW_Baseline_4.2_0.pdf. \n9.  NIST Special Publication 800-57 Part 1 Revision 4, Recommendation for Key \nManagement Part 1: General, http://dx.doi.org/10.6028/NIST.SP.800-57pt1r4. \n10. NIST Special Publication 800-90A Revision 1, Recommendation for Random Number \nGeneration Using Deterministic Random Bit Generators, \nhttp://dx.doi.org/10.6028/NIST.SP.800-90Ar1. \n11. NIST FIPS PUB 140-3, Security Requirements for Cryptographic Modules, \nhttps://doi.org/10.6028/NIST.FIPS.140-3. \n12. NIST Special Publication 800-133 Revision 1, Recommendation for Cryptographic Key \nGeneration, https://doi.org/10.6028/NIST.SP.800-133r1. \n13. NIST Special Publication 800-88 Revision 1, Guidelines for Media Sanitization, \nhttp://dx.doi.org/10.6028/NIST.SP.800-88r1.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          3
        ],
        [
          "N",
          1
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "3.2  Informative References",
      "section_text": "The following documents contain provisions that, through reference in this text, constitute \ninformative provisions of this standard. At the time of publication, the editions indicated were \nvalid. All standards are subject to revision. Users of this standard are cautioned that newer \neditions of the referenced documents might or might not be compatible.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          3
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "3.2.1  Informative Reference List",
      "section_text": "14. NIST SP 800-63-3, Digital Identity Guidelines, June 2017, \nhttps://doi.org/10.6028/NIST.SP.800-63-3. \n15. NIST SP 800-37 Rev. 2, Risk Management Framework for Information Systems and \nOrganizations, December 2018, https://doi.org/10.6028/NIST.SP.800-37r2. \n16. Council to Secure the Digital Economy (CSDE), The C2 Consensus on IoT Device Security \nBaseline Capabilities, https://securingdigitaleconomy.org/projects/c2-consensus/. \n17. NIST, FIPS PUB 186-4 Digital Signature Standard (DSS), \nhttps://doi.org/10.6028/NIST.FIPS.186-4. \n4 \n \nCTA-2088 \n18. IETF RFC 8446, The Transport Layer Security (TLS) Protocol Version 1.3, August 2018, \nhttps://www.ietf.org/standards/. \n19. Internet Assigned Numbers Authority, Transport Layer Security (TLS) Extensions, \nhttps://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-\nvalues.xhtml#tls-extensiontype-values-3 (accessed September 30, 2020). \n20. IETF RFC 6960, X.509 Internet Public Key Infrastructure Online Certificate Status Protocol \n– OCSP, June 2013, https://www.ietf.org/standards/. \n21. IETF RFC 6749, The OAuth 2.0 Authorization Framework, October 2012, \nhttps://www.ietf.org/standards/. \n22. IETF RFC 6347, Datagram Transport Layer Security Version 1.2, January 2012, \nhttps://www.ietf.org/standards/. \n23. IETF RFC 4347, Datagram Transport Layer Security, April 2006, \nhttps://www.ietf.org/standards/. \n24. MITRE, CWE List Version 4.2, Common Weakness Enumeration. \nhttps://cwe.mitre.org/data/downloads.html (accessed October 14, 2020). \n25. NIST, “Lightweight Cryptography.” Information Technology Laboratory – Computer \nSecurity Resource Center. https://csrc.nist.gov/projects/lightweight-cryptography \n(accessed October 27, 2020). \n26. ISO/IEC 29192-2:2019, Information security — Lightweight cryptography — Part 2: Block \nciphers, https://www.iso.org/standard/78477.html. \n27. NIST SP 800-152, A Profile for U.S. Federal Cryptographic Key Management Systems, \nOctober 2015, http://dx.doi.org/10.6028/NIST.SP.800-152.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          3
        ],
        [
          "N",
          2
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "4  COMPLIANCE NOTATION",
      "section_text": "CTA defines the following compliance terms: \nshall    This word indicates specific provisions that are to be followed strictly (no \ndeviation is permitted). \nshall not   This phrase indicates specific provisions that are absolutely prohibited. \nshould   This word indicates that a certain course of action is preferred but not required. \nshould not   This phrase means a certain possibility or course of action is undesirable but not \nprohibited. \nmay  This phrase indicates that a certain course of action is optional, and this \ndocument does not express a recommendation as to preference. \nneed not  This phrase indicates that a certain course of action is not required (i.e., \noptional), and this document does not express a recommendation as to \npreference.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          4
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "5  SECURE DEVICE CAPABILITIES – BASELINE",
      "section_text": "This section includes requirements for Device capabilities that are properties of the hardware \nand software, as opposed to business or development processes or capabilities. \n5 \n \nCTA-2088 \nAs part of the Device’s design specification process, it is critical to define the Security objectives \nwithin the context of the Device’s operational environment. Security objectives are best \nassessed through a risk management process. In particular, the assessment and objectives will \nbe expected to consider the impact the Devices could potentially have on the broader \ninfrastructure in which they operate – for example, how the Devices might be put to use in a \nbotnet attack and how such malicious use would be mitigated or prevented.4",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          5
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "5.1  Device Identifiers",
      "section_text": "“A  unique  value  associated  with  the  endpoint  (or  values  associated  with  the \nfunctional entities within the endpoint) that exists in a namespace to allow it to be \nreferenced without ambiguity.  This value is distinct and distinguishes a device \nfrom  all  other  devices.”    See  C2  Consensus  [16]  5.1.1,  definition  of  Device \nIdentifiers. \nThe Device Identifier capability is for the Device or its Endpoints to provide a unique and—\nwhere possible—attestable and protected Identity parameter to a query from an authorized \nrequestor. \nCredentials are used to verify the Identity of the Endpoint. There are several levels of trust that \ncan apply to an Endpoint, depending on the threat model of the particular IoT system. Each \nlevel of trust determines the minimum Security capabilities of the Credentials, including \nCredential uniqueness, Credential storage and Credential usage (e.g., for Authentication, \nauthorization, etc.). Digital certificates, RFID, passwords, biometrics and QR codes are all \nexamples of Credentials, but vary greatly in their level of trust. \nThis capability does not imply a requirement for a Public Key Infrastructure (PKI)/certification.  \nWhile this capability is important in all Devices, how it is achieved will vary with Device \ncomplexity.  Network Asset Identification is important for all Devices. Its implementation, \nhowever, will vary. It does not require or imply Device certificates or PKI.  Serial numbers and \nother globally-unique identifiers for an IoT Device can be shared via written log entries and \ncommunication with the enterprise management system for managed Devices.  For some \nDevices, this capability can be achieved with the MAC address and/or the IMEI for cellular \nconnected Devices. \nThis capability is important now in Devices with MAC and/or IMEI identifiers and will be \nessential in the future for managing the tens of billions of IoT Devices predicted to be deployed, \nespecially within managed network environments. \n \n4 Council to Secure the Digital Economy, The C2 Consensus on IoT Device Security Baseline Capabilities [page 8] \n(2019), https://securingdigitaleconomy.org/wp-content/uploads/2019/09/CSDE_IoT-C2-Consensus-\nReport_FINAL.pdf \n6 \n \nCTA-2088 \nNetwork asset Identity is a building block that enables a broad range of Security controls that \ndepend on proper handling of Identity. For example, Identity is the basis for trust in asset \nmanagement, Authentication, authorization and remote maintenance. \nAn Endpoint may have a single Identity, or multiple identities, used for different applications. \nOne common example of a Credential is a cryptographic certificate (e.g., X.509 digital \ncertificate). Certificates can be generated and signed by a certificate authority (CA), for better \nlevel of trust, but can be self-signed for localized self-assertion of trust requirements. \nThe level of trust attributed to a Credential depends on its uniqueness and strength. An IP \naddress, a MAC address and Authentication information encoded into a QR code are all \nCredentials, and they are unique, but they are not strong, as they can be falsified to \nimpersonate another Endpoint. A cryptographic certificate is both unique (with appropriate \nrandomness) and strong (depending on key type and length). However, if the private key \nassociated with the certificate is not stored and processed in protected storage and memory, \nthe certificate can still be compromised. Several standards exist that provide guidance on \nchoosing the right level of protection for Endpoint Identity: ISO/IEC 29115, IEC 62443, and \nISO/IEC 24760-1.5 \nPotentially, the network asset identification value can be globally unique. Note that immutable \nDevice identifiers can be problematic from a privacy perspective and are expected to be \nevaluated on that basis. \nStable Device identifiers, such as IMEI, are privacy sensitive, and care is expected to be taken to \nminimize the privacy risk of exporting or sharing them, especially to third parties and for \nreasons beyond the core necessary operation of the overall system/service.  Developers are \nexpected to consider risk mitigation strategies such as automatic or customer-driven identifier \nreset (MAC randomization is an example of this) and limiting access only to privileged system \nsoftware that needs such access. \nNote that in low-complexity Devices, for design purposes, there might not be an outward facing \n(printed and visible) serial number. \nDI-001  [Operational Credentials] The Device shall have operational Credentials that it will \ndisclose only to authorized parties. These Credentials shall be a public/private key \npair of strength at least equivalent to Elliptic Curve Cryptography (ECC) P-256, and as \ndesignated as acceptable by NIST SP 800-131A Rev. 2 [1], and should be an X.509 \n \n5 ISO/IEC 29115:2013, Information technology — Security techniques — Entity authentication assurance \nframework, is available at https://www.iso.org/standard/45138.html.  The IEC 62443 Industrial communication \nnetworks - Network and system security family of standards is available at https://www.iec.ch/.  ISO/IEC 24760-\n1:2019, IT Security and Privacy — A framework for identity management, is available from \nhttps://www.iso.org/standard/77582.html. \n7 \n \nCTA-2088 \ncertificate based on the Elliptical Curve Digital Signature Algorithm (ECDSA), with \nECC and ECDSA as specified in FIPS 186-4 [17]. \nDI-002  [Roaming Privacy] Devices shall employ approaches that do not require disclosure of \nCredentials to prevent operational Credentials from being exposed to unauthorized \nnetworks.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          5
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "5.2  Secured Access",
      "section_text": "“Protection  of  device  operational  and  management  capabilities  (including  the \nassociated software and configuration) by requiring user6 authentication to read \nor modify the configuration, including means to ensure device-unique credentials \nfor  administrative  access,  and  by  protecting  access  to  interfaces.”  See  C2 \nConsensus [16] 5.1.2, definition of Secured Access. \nThis capability includes Authenticating and Authorizing users and other Devices or services for \nremote or local access to the Configuration and stored data.  Authentication takes different \nforms and will depend on the application but may include requiring a Secure certificate from a \ntrusted source, User Credentials, biometrics and multi-factor Authentication.  Authentication \nmust follow good cryptographic practices, including requiring complex passwords and period \nchanging of some passwords, certificates or keys. \nThis capability also includes physical interfaces (e.g., debug ports or JTAG) as needed to ensure \nprotection of the Configuration.  This capability does not include preventing or detecting \nphysical access to the Device. \nThis capability is intended to protect the Device from unauthorized access to the internals of \nthe Device either remotely or when the malicious actor has physical access. \n  [Device Configuration] The Device should allow changes to its Configuration.  \nThe Device Configuration capability does not define which configuration settings should exist, \nsimply that a mechanism to manage configuration settings exists. \n \n  [Authentication for Admin Access] Successful User Authentication shall be completed \nbefore any Configuration change or administrative function is permitted.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          5
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "5.2.1  Credentials and Logins",
      "section_text": "Credentials are necessary to securing access to and from any Device. Credentials come in a \nvariety of forms, including passwords, passphrases (such as for a Wi-Fi network), username and \npassword combination, X.509 certificates (such as those used by website domains) and other",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          5
        ],
        [
          "N",
          2
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6 “User” refers to the consumer using a Device, a technician responsible for installation or maintenance, an",
      "section_text": "authorized employee in a managed environment, etc. \n8 \n \nCTA-2088 \ncertificate formats. For use with TLS [18] and DTLS [22], the Internet Assigned Numbers \nAuthority (IANA) [19] maintains a TLS Certificate Types registry.  \nSome Credentials are presented and used by the Device or its applications to allow it to be \nauthenticated by external sites, Devices or people. These are the Device’s own Credentials. \nOther Credentials can be used by the Device to authenticate external sites, Devices, software or \npeople. What activities are authorized after successful Authentication is a matter of policy of \nthe Authenticating Entity. \nAny Credentials that can be used to compromise the Security of the Device or system that \nincludes the Device (whether these are the Device’s own Credentials or Credentials used to \nauthenticate others) are to be secured as described in Section 5.4. Requirements for generating \nand managing Credentials are below. \nFor cases where stored Credentials are used to authenticate others (e.g., login for remote \naccess to the Device, determining whether a web or cloud server can be trusted, etc.), it is \nimportant to use appropriate measures to defend against Credential-based attacks. The \nmechanism by which the Device verifies those other Credentials needs to be resistant to \ntampering in order to ensure that Credential verification is completed correctly. In many cases \nthe authenticity of a Credential is verified using a public key present on the Device. Those keys \nare subject to the key management requirements in this document. \nCredential-based attacks include brute force attacks (repeated guessing of passwords), \ncertificate Identity spoofing, and using compromised certificates and passwords.  \nFor any Credentials or passwords that could compromise the Security of the Device or system \nincluding the Device if they were successfully used by an attacker, the following requirements \napply: \n  [Rate-Limit Login Attempts] Unsuccessful login attempts on ports other than \ndiagnostic ports shall be rate-limited to prevent brute-force attacks and similar and \nshould include exponentially-increasing password or Credential entry delays after a \nreasonable number of sequential incorrect entry attempts. \nSee Section 5.7 for additional logging requirements. \n \n  [Diagnostic Ports] Diagnostic ports, such as JTAG, I2C and other diagnostic ports \n(UART, serial, or other types), should be secured by disabling or by limiting features \nand access to the minimum necessary to accomplish – e.g., field service \nfunctions.  Such ports should, to the extent possible, require passwords or \nCredentials for access.  Such ports should, to the extent possible, rate-limit \nCredential failures to limit brute-force attacks. See SA-003. \n  [Change Non-Unique Default Credentials on First Use] When a non-unique default \nCredential exists that could compromise the Security of the Device or system, this \nCredential shall be required to be changed upon first use. \n9 \n \nCTA-2088 \nThis includes Credentials that allow users to access the Device through graphical user interfaces \n(e.g., supplied from an embedded HTTP server) or command-line interfaces (e.g., supplied over \nSSH).  \n \n  [Using Unique Default Credentials] Devices should have unique (per Device) default \nCredentials for Credentials that could compromise the Security of the Device or \nsystem. \nAs computing capabilities become more powerful and less expensive, recommended best \npractices might change. \n \n  [Ensuring Device Credentials Can Be Updated] Device Credentials that could \ncompromise the Security of the Device or system including the Device if they were \nsuccessfully used by an attacker shall be stored in a manner that allows them to be \nupdated. \nRequirements related to cryptographically securing Credentials are in section 5.4. \n \n  [Including Unique Device Credentials in Firmware] If included in firmware, Device \nCredentials that could compromise the Security of the Device or system including \nthe Device if they were successfully used by an attacker shall be unique to the \nDevice. \nIf Credentials are included in firmware, a firmware upgrade will be needed to change the \nCredentials. If the same Credentials are used for many Devices, ensuring the firmware of all \nDevices is updated if the Credentials become compromised is difficult. \n \n  [Unique Credentials and Keys] Credentials and keys should be unique to a Device or \nAuthorized User, and absent a reason to do so, should not be shared among Devices \nor Authorized Users. \nCredentials can contain one or more parts, each of which can have different Security \nrequirements. For example, a Credential can be composed of public Credential information and \nsecret private Credential information, such as two halves of an asymmetric key or simply a \nusername and password. The requirements for storage, transmission and use of these \nCredentials are critical to avoiding Device or delegate impersonation to other systems and \navoiding impersonation of other systems to the Device. \nA Device can store Credentials that identify the Device itself (Device Credential) or that \nidentifies a principal that the Device is empowered to represent (User Credential) to third \nparties. Availability can be compromised if these Credentials are modified: access to other \nsystems would be interrupted. Confidentiality and authenticity can be compromised if these \n10 \n \nCTA-2088 \nCredentials are duplicated; other systems can impersonate the principal and/or intercept or \nmodify their communications. \n  [Storing/Transmitting Credential Information] When the Device stores or transmits a \nCredential, that Credential shall be cryptographically protected from improper \nexposure or modification. \n  [Storing Private Credential Information] If the Device stores a secret such as a private \nkey or password, the secret shall be protected from being read or written by any \nprocesses that do not require such access. \n  [Transmitting Private Credential Information] If the Device transmits a secret such as \na private key or password as part of a Credential, it shall be transmitted \nconfidentially from all parties that do not require access to it. \n  [Storing Public Credential Information] If the Device stores a public key or username \nas part of a Credential, it shall be stored protected from write access by all processes \nthat do not require write access to it. \n  [Transmitting Public Credential Information] If the Device transmits a public key or \nusername as part of a Credential, it shall be transmitted cryptographically protected \nfrom modification by all other parties. \n \nA Device can store information used to verify the Identity of Claimants. Availability can be \ncompromised if this information is modified: connections to or from other systems would be \ninappropriately rejected if the Device refuses a valid Credential. Confidentiality and authenticity \ncan be compromised if the information is modified to represent Credentials under the control \nof an adversary or if re-usable Credentials such as passwords are acquired by an adversary. \n  [Safeguarding Private Credential Information] If the Device is storing secret \ninformation such as passwords or HMAC keys that it will use to authenticate end-\nusers or other systems, those secrets shall be stored in such a way that, should the \nsecret repository be revealed, the secrets themselves are unrecoverable. Controls \nthat satisfy this requirement include storing properly salted hashes of passwords or \nsimilar strong cryptographic means. \n  [Safeguarding Trust] If the Device will authenticate a Credential presented by a \nClaimant, the information necessary to bind the Identity to the Credential (e.g., a \nlocal copy of a public key, a password hash) shall be protected from being modified \nby any processes that do not require such access. \n5.2.2  Validate Certificates \nIt is not reasonable to check revocation lists every time a certificate is presented. But it is \nimportant to have a policy that periodically checks whether some or all of the stored \ncertificates are in a revocation list. Certificate periods of validity can vary. \n11 \n \nCTA-2088 \n  [Checking Signatures] When X.509 certificates are used to establish Secure \nconnections (e.g., using TLS or DTLS), the Device shall check whether the certificate \nis in its store of trusted certificates or was signed by a certificate in its store. This \nrequirement does not preclude using Trust on First Use (TOFU) policies. \n  [Limited Use of Untrusted Certificates] A Device shall not authorize presenters of \nuntrusted certificates to perform functions integral to the Security of the system. \n  [Certificates are Updateable] If X.509 certificates are used in a system, then any \ntrusted certificates shall be periodically updated. See DAR-004. This is particularly \ntrue of trusted root certificates.   \n  [Secure Online Updates] Trusted root certificate updates should be performed in a \nSecure online mechanism and should be performed such that trusted root \ncertificates (which need to be continued to be trusted) are updated or replaced \nbefore the validity periods end.  \n  [Acquiring Network Time] When X.509 certificates are used to establish Secure \nconnections (e.g., using TLS or DTLS), the Device shall attempt to acquire the current \ndate and time using the Network Time Protocol (NTP) [2], Precision Time Protocol \n(PTP) [3], or similar. \n  [Checking Certificate Validity Periods] When X.509 certificates are used, and the \nDevice has acquired the current date and time, the Device shall not accept \ncertificates where the current date and time are outside the certificate’s validity \nperiod. \nNote this requirement does not speak to what a Device should do when X.509 \ncertificates are used but the Device has not (yet) received the current date and time. \n  [Secure Time Required] When checking validity periods of X.509 certificates or other \ntime-related functions, the Device should protect itself against attacks on network \ntime via Secure means such as RFC 8915 [4]. \n  [Secure Time] Devices should acquire time via Secure means such as RFC 8915 [4]. \n  [Time Anomalies] The Device should implement detection and response measures \nfor anomalous time events (e.g., UTC time should never move backward outside of \ncertain special cases); in such cases the Device should seek another source of time, \ndiscard invalid time or take other appropriate measures. \nNote there is no published and accepted standard available for Secure time syncing. \nIn the absence of a valid time sync, operations that do not require Secure time may continue to \noperate as normal, but as stated via the requirements above, operations that rely on Secure \ntime should not continue to operate. \n  [Secure Time not Required] If validity periods of X.509 certificates or other time \nrelated functions are not integral to the Security of the system, and the Device skips \ntime-related X.509 validation and other time-related functions due to the absence of \na valid time sync, the Device shall still otherwise validate certificates.   \n12 \n \nCTA-2088 \nIn the absence of a valid time sync, the Device may otherwise operate as if a valid \ntime sync had occurred. \n  [Confirming Certificate Status Using CertificateStatus Structure] When X.509 \ncertificates are used to establish TLS or DTLS sessions, the Device shall validate any \nCertificateStatus structures (“stapled OCSP [20] responses”) provided in the \nhandshake with the certificate, as defined in [5]. SA-027 does not require clients to \nrequest CertificateStatus; in this case, CertificateStatus structures will not be \nincluded in the response. \n  [Confirming Certificate Status Using OCSP] When X.509 certificates are used, the \nDevice should implement Online Certificate Status Protocol (OCSP) [20] and should \nverify certificate validity using OCSP for each intermediate or end-entity certificate \nnot provided with a stapled OCSP response. \nOnline (e.g., not stapled) OCSP transactions adds delay and is not generally used for real-time \nvalidation of certificates. However, periodically using online OCSP to check the status of \ncertificates in a certificate store (including any stored CA certificates and certificates used to \ntrust signatures of OCSP information – including OCSP information in CertificateStatus \nstructures) might be appropriate. \nThe Device may support Certificate Revocation Lists (CRLs) to determine certificate validity. \nCRLs can grow unreasonably large, and it might not be reasonable (and might not even be \npossible) to check revocation lists every time a certificate is presented. \n \n  [Refusing Sessions with Invalid Certificates] The Device shall not use any certificate it \nhas determined to be invalid (see Section 5.2.2). \n  [Terminating Sessions of Invalid Credentials] If the Device determines that the \npresented Credentials are invalid (or no longer valid), the Device shall not continue \nto allow access to resources permitted by such Credentials. \n  [Validating Certificate Identity] If X.509 certificates are used to establish TLS or DTLS \nsessions, the Device shall validate the Identity provided with the certificate against \nany other information the Device has regarding that Entity’s Identity. \nFor most web services, SA-031 includes checking the domain name the Device is attempting to \ncommunicate with against the domain name included in the certificate. The Common Name \nfield and   fields are commonly used to provide Identity information. \nsubjectAltName\nFor certificates used by Remote Management protocols that allow Device Configuration which \ncan compromise the Security of the Device or system including the Device if successfully used \nby an attacker, it is important that Identity be validated according to requirements of those \nprotocols. \n \n13 \n \nCTA-2088 \n  [Use Certificates for Indicated Purposes] If X.509 certificates are used, the Device \nshall ensure the certificate is used only for its indicated purposes. \nFor example, the Extended Key Usage field must include the   key purpose \nid-kp-serverAuth\nto authenticate a TLS server. Devices can also have policies that attach authorized uses to \nspecific identities.  \nFor certificates used by Remote Management protocols that allow Device Configuration which \ncan compromise the Security of the Device or system including the Device if successfully used \nby an attacker, it is important that the Device confirms the certificate can be used for the \nprotocol, according to requirements of the protocol.  \n5.2.3  User Interfaces, Console Ports and Remote Management Protocols \nSome Devices support Remote Management protocols, Console Ports or a user interface that \nallows Device Configuration. If not sufficiently secured, an attacker can use such protocols and \nInterfaces to compromise the Security of the Device or the system that includes the Device. \n  [Supporting Remote Management and User Interface Protocols] Devices that \nimplement Remote Management and user interface protocols that can compromise \nthe Security of the Device or system shall implement Security functionality for those \nprotocols. \n  [Not Including Protocols with Known Security Flaws] If a Remote Management or \nuser interface protocol will be used to allow Device Configuration that can \ncompromise the Security of the Device or system, Devices shall not implement \nInsecure or deprecated Remote Management or user interface protocols (or \nprotocol versions). \n  [Implement the Most Recent Specification and Guidelines] Remote Management and \nuser interface protocols shall be implemented according to the most recent \nguidelines and specifications supplied by the maintainer of the protocol. \nThe requirement of SA-035 includes refraining from use of versions or elements (parameters, \noptions, etc.) of the protocol that have been deprecated by the maintenance organization. \nCommon management and remote access protocols are listed in Annex A. \n \nThe Console Port is a physical, dedicated interface (including wired, wireless – radio, infrared, \nand other) on a Device that provides capabilities to configure, manage or monitor a Device in \nways that are not ordinarily provided to a user. \n  [Console Port Existence] Unless a Device requires a Console Port, it should not have \none. \n  [Console Port Accessibility] If a Console Port is present, and users are not expected \nto use it, the Console Port should be difficult to access without Specialized or \nProprietary Tools. \n14 \n \nCTA-2088 \n  [Physical Console Port Authentication] If a Console Port is present, it shall not allow \ncommand and control until after Authentication of an Authorized User. \n \nWhile this standard makes no requirements upon development and debugging phases of \nproduct development, it is important that any debugging and/or testing interfaces are disabled, \nremoved or secured on production units.  \n5.2.4  Web Services \nApplications inside Devices are often expected to communicate with websites and cloud \nservices on the Internet. This communication is usually initiated from the Device. \nSection 5.3 provides requirements for securing data in transit (between the Device and an \nexternal site). Section 5.2.2 provides for validating website X.509 certificates. \n  [No Device-Stored Cloud Credentials] Username and password combinations (for the \nDevice to logging to the website/cloud server) should not be stored on the Device. A \nprotocol such as OAuth2 [21] should be used instead of storing username and \npassword combinations. See DAR-001. \n  [No Hardcoded Credentials] Device Credentials presented to websites and cloud \nservers that allow access by the Device to Sensitive Data shall not be hardcoded into \nfirmware. \n  [X.509 Certificate Device Credentials] X.509 certificate Device Credentials shall have \na Secure mechanism to update those certificates. \nDevices are expected to support current best practices related to keys, single sign-on, \npasswords and other Credentials.  \n5.3  Data In Transit is Protected \n“Protection  of  the  confidentiality  and  integrity  of  selected  categories  of \ntransmitted data via sound cryptographic means, e.g., HMACs, TLS / DTLS, IPsec, \nor SSH.”  See C2 Consensus [16] 5.1.3, definition of Data In Transit Is Protected. \n5.3.1  Physical Networking Technologies Supporting Ethernet MAC \nPhysical layer networking protocols define mechanisms for transmitting bits of information over \na physical medium (including air). Physical networking layer technologies that support a MAC \nlayer consistent with IEEE 802.3 include Wi-Fi (802.11), G.hn, 100BaseT Ethernet, HomePlug, \nMoCA and other similar mechanisms. These protocols are capable of running IPv4 and IPv6 \nprotocol over their MAC layer.  \nImplementations of network technologies that go over a medium that is always fully contained \nwithin a single physical network rarely include support for encryption at the physical layer. This \n15 \n \nCTA-2088 \nincludes GigE and 100BaseT Ethernet running over dedicated CAT6 or other usable grade of CAT \nwires. \nPhysical layer technologies that run over powerline, coax or wireless media define how to \nencrypt the physical layer technology. \nDIT-001  [Encrypting Physical Layer Technologies] Devices that communicate using protocols \nover an Ethernet MAC shall support the physical layer encryption mechanisms \ncurrently required by the certification authority for that physical layer technology.  \nDIT-002  [No Deprecated Physical Layer Encryption] Deprecated physical layer encryption \nmechanisms should not be supported. \nThere are times when commercial requirements require the use of older, deprecated, possibly \nInsecure protocols for backwards compatibility (or other) purposes; except in those cases, use \nof deprecated mechanisms is discouraged. \n \nDIT-003   [Implementing Physical Layer Trust Mechanisms] If one or more pairing or “trust” \nmechanisms are defined and recommended for the physical layer technology, at \nleast one such mechanism shall be supported. \nFor encryption to be useful, Devices need a means to disseminate encryption keys to trusted \nDevices wanting to join a network or to pair with each other. This requires a method for users \nto indicate “trust” to be implemented.  \nPhysical layers that support encryption generally define one or more of the following pairing or \n“trust” mechanisms: \n•  Entering a passphrase into a user interface: technologies that support passphrases will \nhave minimum requirements for acceptable passphrases. \n•  Pushbutton pairing: pushbuttons can be physical or implemented in a graphical user \ninterface (GUI). \n•  QR Codes with a 3rd Device that can scan codes and communicate with Devices. \n•  Certificates. \n5.3.2  Physical Networking Technologies Without Ethernet MAC \nPhysical layer technologies that define a MAC layer substantively different than Ethernet MAC \ninclude 802.15 (Thread, Zigbee), Z-Wave, X10 and other protocols designed for use by \nconstrained Devices. \nDIT-004  [Physical Networking Technologies without Ethernet MAC] Devices implementing \nnetworking technologies that do not support 802.3 MAC frames should support the \nencryption mechanisms currently recommended for that technology by a recognized \ncertification authority for that technology.  \n16 \n \nCTA-2088 \n5.3.3  Link-Layer Application Protocols \nSome application protocols are designed to only be used on a local network. This is usually \ndone by defining the protocol to be transported directly over the link-layer protocol (e.g., \nEthernet MAC) or to use IP link-local addressing. These application protocols are often used \nwithout encryption or signed packets. \nExamples of such protocols include Multicast DNS (mDNS) (commonly used for discovering \nDevices and services on the local network), discovery of CoRE resources, SSDP (used for UPnP \ndiscovery and advertisement on a local network), LLDP (used to communicate Ethernet \ntopology information), and IEEE 1905.1 (used to communicate physical layer topology and to \nmanage multi access point networks). \nNo restrictions are placed on use of protocols that only operate over the link layer or use link-\nlayer addressing. \n5.3.4  Encrypting IP Transport Protocols \nDIT-005  [Implementing TLS for TCP/IP] If the Device implements TCP/IP, it should implement \nTLS. \nDIT-006  [Encrypting TCP/IP with TLS] If the Device implements TLS, it shall comply with \nrequirements in the section “Minimum Requirements for TLS Clients” in the current \nrevision of NIST SP 800-52 Rev. 2 [6]. \nDIT-007  [Encrypting UDP/IP with DTLS] Devices with support for UDP over IP protocol should \nimplement DTLS 1.2 [22] and future revisions of DTLS. \nDIT-008  [Earlier DTLS Versions] DTLS 1.0 [23] should not be implemented. \nDIT-009  [Protecting Credentials in Transit] Device Credentials that could compromise the \nSecurity of the system, including the Device, if such Credentials were successfully \nused by an attacker, shall be cryptographically secured when in transit. \n5.3.5  Integrity \nDIT-010  [Integrity in Transit] The integrity and authenticity of data in transit shall be verified \nusing sound cryptographic means. This may be satisfied by using authenticated \nencryption for confidentiality or by an additional authenticity control applied to the \ndata. \n5.4  Data at Rest is Protected \n“Protection of the confidentiality and integrity of selected categories of stored \ndata via sound cryptographic means.”  See C2 Consensus [16] 5.1.4, definition of \nData At Rest Is Protected. \n17 \n \nCTA-2088 \nDAR-001  [Securing Device Credentials at Rest] If usernames and passwords for the Device to \nlog in to a remote server are stored on the Device, they shall be cryptographically \nsecured.  See SA-039. \nDAR-002  [Data Protection when not Powered] Data that is stored on the device that, if \ncompromised, would enable attacks at scale such as botnet attacks (e.g., \nCredentials) shall be protected, even for power-off conditions and subcomponents \nof the Device that could be physically removed and Sensitive Data extracted. \nEncryption at rest can meet this requirement; simply soldering a Device to a circuit board does \nnot constitute protection. \n \nDAR-003  [Trusted Root Storage] A receiver, at a minimum, shall have sufficient non-volatile \nstorage to store the set of trusted root certificates and the set of trusted OCSP [20] \nresponder certificates. \nDAR-004  [Ability to Update Trusted Roots] A Device shall have a mechanism for updating the \nset of trusted root certificates and trusted OCSP [20] responder certificates due to \nexpiration, revocation, update or other reasons.  \nDAR-005  [Updating Roots Via Image] In the event a root certificate or OCSP [20] responder \ncertificate needs to be replaced or updated, updates shall be performed by an \nupdate of the software code image. \nDAR-006  [Initial Trusted Roots] An initial set of trusted root certificates and OCSP [20] \nresponder certificates shall be installed as part of the software code image installed \nduring the manufacturing process, and the certificate store shall be periodically \nverified by the Device to be valid and unchanged from the original image. The store \nshall be verified at least at every boot-up and should be verified at least monthly. \nThe store should be verified by comparing a computed Secure hash against a stored \nSecure hash, by a code signing mechanism, or by an equivalent cryptographic \nmechanism at boot-up. \nDAR-007  [Runtime Storage of Certificates] In the event a Device copies trusted certificates \ninto runtime memory (e.g., when expanding a compressed software image), the \ncertificate storage memory area shall be configured as “read only” such that any \nattempt to write in this area is prevented (e.g., by hardware memory management). \nDAR-008  [Integrity of Data at Rest] The integrity and authenticity of data at rest shall be \nverified using sound cryptographic means. This may be satisfied by using \nauthenticated encryption for confidentiality or by an additional authenticity control \napplied to the data. The controls may be applied at the message, file or media level \n(e.g., Full Disk Encryption) as appropriate. Systems that otherwise swap or page \nprogram memory to non-volatile storage need not meet this requirement for data \nstored in pinned memory. \n18 \n \nCTA-2088 \nDAR-009  [Frequency of Integrity and Authenticity Checks] Verification of the integrity and \nauthenticity of data at rest should occur at a frequency appropriate to the risk of \nadversary modification of stored data.  \nDAR-010  [Secure Boot] Each firmware and software executable at boot time should have an \nassociated signature meeting the requirements of CRY-003.  \nThe Secure boot may have multiple data stores for storing such certificates and hashes.  \n \nDAR-011  [Untrusted Executable] If Secure Boot is used and an executable file cannot be \nvalidated as trusted, it shall be treated as untrusted and shall not be executed. \n5.5  Industry Accepted Protocols are Used for Communications  \n“Use of secure, widely used protocols, excluding deprecated and replaced versions \nand protocols, for communications to and from the device.”  See C2 Consensus [16] \n5.1.5, definition of Industry Accepted Protocols are Used for Communications. \nThis section contains general requirements intended to apply to all protocols used by a Device. \nSpecific requirements for protocols used to establish encrypted or otherwise secured \nconnections are in Section 5.3. Specific requirements for protocols used to remotely manage \nDevices are in Section 5.2.3. \nIAP-001  [Use Standardized Protocols] Communications protocols used should be compliant \nwith: \n1)  A technical standard from an international standards body including ISO, IEC, \nITU, IETF, ETSI; or \n2)  A technical standard from a recognized regional standards body including \nCTA, SCTE, ATSC, or regionally-accredited standards bodies; or \n3)  A technical standard from a recognized industry alliance or consortia such as \nWi-Fi Alliance, Bluetooth SIG, or the ZigBee Alliance. \nIAP-002  [No Deprecated Protocols] Communications protocols that are deprecated by any of \nthe following authorities: IETF, NIST, CERT; or by the SDO, industry consortia or \nalliance with responsibility for the protocol, including Wi-Fi Alliance, Bluetooth SIG, \netc., should not be used. \nNote that SA-035 includes more stringent requirements for remote access or \nmanagement protocols.  \nIAP-003  [Use Recommended Profiles/Constraints] Profiles and constraints for \ncommunications protocols that are described by any of the following authorities: \nIETF, NIST, CERT; or by the SDO, industry consortia, or alliance with responsibility for \nthe protocol, including Wi-Fi Alliance, Bluetooth SIG, etc., should be followed.  \nThe above two constraints recommend against using deprecated, abandoned or Insecure \ntechnologies, features or options of communications protocols. \n19 \n \nCTA-2088 \n5.6  Data Validation \n“Parsing and limiting input data to prevent it from being used directly as code, \ncommands, or other execution flow inputs; and encoding output data in a form \nappropriate to and limited to its intended usage.”  See C2 Consensus [16] 5.1.6, \ndefinition of Data Validation. \n \nThe scope of input data is all data received and processed by the Device, including data strings \nentered through the Device UI or web interface (including passwords), files uploaded to the \nDevice, container meta-data, messages (e.g., SOAP and XML) and other data transferred via \nAPIs and services. \nDevices can be attacked by malicious data strings (e.g., executable code disguised as input data) \nor files for the purpose of subverting the Device, causing it to fail or behave incorrectly.  The \ninput data can originate from the user or from other Devices or services. Attackers can use \nautomated tools to find and exploit failures to validate input data.  To protect the Device, the \nuser and the network from attacks, all data coming into the Device must be thoroughly \nvalidated.  It is also important that data leaving the Device has been validated or is otherwise \nwell formed, safe to pass on and as intended. \nDV-001  [Canonicalization of Input] The Device shall convert all input to a canonical form \nprior to further use. \nDV-002  [Validation of input] The Device shall validate input data for length, character type \nand acceptable values or ranges. \nDV-003  [Filtering of Input] The Device should use allow-listing rather than deny-listing when \nfiltering input data. \nDV-004  [Common Web Application Attacks] For Devices that present a web page as the user \ninterface for an administrative console that allows Device Configuration changes, \nand Devices that support similar administrative functions via APIs, the Device shall \nimplement measures to prevent the following common attack types defined in the \n2017 OWASP Top 10 Application Security List [7]: \n1)  Injection \n2)  XML External Entities (XXE) \n3)  Cross-Site Scripting (XSS) \n4)  Insecure Deserialization \nDV-005  [Embedded Systems Attacks] The Device should implement measures to prevent \ncommon attack types by following Secure coding practices for input data. The Device \nshould use a type-safe language; if this is not possible, the Device should implement \nbounds checking and use safe typing and safe string handling functions. The Device \nshould use some form of stack protection such as canaries or ASLR. \nExamples of common attack types (see the CWE list [24] for details): \n•  Buffer Overflow (Stack/Heap) (CWE-121/122) \n20 \n \nCTA-2088 \n•  Integer Overflow (CWE Category ID 872) \n•  Format String (CWE Category ID 133) \n•  Invalid pointer handling (e.g., double free/dangling pointer) (CWE Category \nID 465, CWE-415, 416) \nThis item is extremely important.  However, for many kinds of Device architectures, it is difficult \nor impossible to independently test it Post-Market. It is included here to emphasize this \nimportance, although it uses the keyword ‘should’ because a ‘shall’ requirement would not \nalways be testable in the general case. \n \nDV-006  [CWE Programming Language Views] The CWE list [24] outlines common issues \nfound in specific programming languages such as C, C++, Java and PHP. These lists \nshould be reviewed and effective countermeasures incorporated into software \ndevelopment policies. \nDV-007  [File Upload and Processing] The Device shall check files being uploaded or \notherwise transferred into the Device for type and size, sanitize files including their \nfile names and paths, and otherwise ensure incoming files cannot execute unless \nthey are authorized digitally-signed files such as firmware and software updates. The \nDevice shall sanitize files prior to use or pass through. \n5.7  Event Logging \n“A limited persistent record in the device of relevant events, secured and available \nto authorized users.”  See C2 Consensus [16] 5.1.7, definition of Event Logging. \nELG-001  [Event Logging] If the Device supports Secured access or management (see Section \n5.2.3), the Device should support logging of Security events. Such events include \n(but are not limited to) attempts to log in to any remote access or administrative \ninterfaces and periods of degraded Device performance.  \nELG-002  [Enabling/Disabling Event Logging] The device should log events by default unless \nthere are performance, Device lifetime, or powering implications, in which case the \nDevice may allow logging to be enabled or disabled. \nELG-003  [Logging Firewall Events] If the Device supports a firewall and supports Remote \nManagement or a user interface (see Section 5.2.3), the Device shall meet Logging \nrequirements of ICSA Labs Firewall Certification Criteria Baseline Module [8]. \nELG-004  [Log Memory Location] The memory location for logging should be appropriate for \nthe planned number of logs stored and available space. The location for log storage \nshould consider how logs are accessed to ensure appropriate security precautions \nare included by design. For non-volatile memory, wear-leveling from program and \nerase cycles should be considered when designing for expected performance and \ndevice lifetime. \n21 \n \nCTA-2088 \nThe intention is to capture and provide users with access to information that could be indicative \nof an attack. \n5.8  Cryptography \n“Where cryptography is used, use open, published, proven, and peer-reviewed \ncryptographic  methods  with  appropriate  parameter,  algorithm  and  option \nselections.” See C2 Consensus [16] 5.1.8, definition of Cryptography. \n“The purpose of cryptography is to ensure confidentiality, integrity and availability. Example \nuses may include protecting data in transit (outside the device and in certain cases within the \ndevice), protecting data at rest, authentication, authorization, etc. Determining the data to be \nprotected requires some judgement; see related sections. However, examples of such data may \ninclude sensitive data (credentials, etc.) and user defined data (PII, access credentials, etc.).” \nSee C2 Consensus [16] 5.1.8, discussion of Cryptography. \nSecurity systems must be designed and implemented properly and utilize underlying \ncryptographic subsystems correctly to be effective. The entire cryptographic system internal \nand external to the Device must be managed securely end to end. Even when Secure and \nproven algorithms are used the system can still be vulnerable through other parts of the \nsystems – e.g., Insecure key management, side channel attacks, etc. Even when using a proven \noff-the-shelf solution, any points of interface with the solution can be vulnerable and must be \nscrutinized. \nIoT Devices might be resource constrained so lightweight, updateable and scalable \ncryptographic methods are recommended. NIST has a project on selecting methods suitable for \nlightweight cryptography. More information is available at the NIST Lightweight Cryptography \nproject site [25].  \n \nCRY-001  [Cryptographic Methods] The Device shall only use strong, industry-standard, open \nand peer-reviewed cryptographic methods. The Device shall not use proprietary \ncryptographic methods. \nDue to the complexity in designing and implementing cryptographic algorithms, product \ndesigners are expected to only use publicly-disclosed algorithms that have been subject to peer \nreview and academic study.  Use of proprietary or altered cryptographic algorithms provides \nlittle to no value to the Security of a system and is of significantly less value than using known-\nsecure algorithms with an appropriately generated and managed key. \n \nCRY-002  [Deprecated Cryptographic Methods] The Device shall not use deprecated, \ndisallowed, weak or broken cryptographic methods as per NIST SP 800-131A Rev. 2 \n[1]. \nCRY-003  [Security Strength] The Device shall implement a cryptographic Security strength \nequivalent to at least 112 bits of Security. The Device should implement a \n22 \n \nCTA-2088 \ncryptographic Security strength equivalent to at least 128 bits of Security. Consult \nNIST SP 800-57 Table 2, section 5.6.1 Comparable Algorithm Strengths [9]. \nSecurity strength is generally the workload required to identify the key used, expressed in bits. \nAsymmetric algorithms often require an increased number of key bits to provide a strength \nequivalent to symmetric algorithms. For example, 3072-bit RSA is equivalent in Security \nstrength to 128-bit AES-128. However, the Security strength of cryptographic algorithms \nrepresents more than this simple equivalency of the number of bits of the cryptographic key \nand must consider attacks that reduce the difficulty of attacking that particular algorithm. For \nexample, there are analytical methods that reduce the workload of an attack and thus the \nSecurity strength must include such factors. \n \nCRY-004  [Device Lifecycle] The Device shall use cryptographic methods that are considered to \nbe Secure over the lifetime of the Device in alignment with NIST SP 800-131A Rev. 2 \n[1].  Cryptographic methods should be updateable. \nCRY-005  [Lightweight Cryptography] If using lightweight cryptography, the Device should use \nmethods that comply with ISO/IEC 29192 [26]. \nCRY-006  [Randomness] Randomly generated values for cryptographic use shall be generated \nusing either a pseudorandom generator as per NIST SP 800-90A Rev. 1 [10] or a true \nsource of randomness as per FIPS-140-3 [11]. \nCRY-007  [Key Insertion and Storage] Key insertion shall be done using a Secure method. The \nDevice shall store unencrypted keys in a tamper-resistant location such as a Secure \nElement (e.g., Hardware Security Module or Trusted Platform Module). \nCRY-008  [Key Provisioning] A Secure process shall be used for the provisioning of keys in \nalignment with NIST SP 800-133 Rev. 1 [12]. \nCRY-009  [No Key Reuse] Cryptographic key material shall be protected from unauthorized \ndisclosure through reuse – e.g., by using different keys for development and \nproduction deployment. \nCRY-010  [Key Length] The Device shall use cryptographic keys of sufficient type and length for \nthe use case and expected lifetime of the Device. Symmetric encryption keys should \nbe of a type and length considered resistant to post-quantum attacks. \nCRY-011  [Time Source] The Device shall use a Secure time source when cryptography relies on \nit. \nCRY-012  [Side Channel Leakage] The Device should be resistant to known side channel \nattacks. \n5.9  Patchability \n“The ability to verifiably update a device’s configuration firmware or software, \npost-market, with patches that are authenticated to ensure that they have been \n23 \n \nCTA-2088 \ndeployed by an authorized entity as well as to verify the integrity of the patch.”  \nSee C2 Consensus [16] 5.1.9, definition of Patchability. \nPAT-001  [Patchability] The Device shall have a cryptographically Secure mechanism for \nauthorized entities to update a Device’s firmware and software after development \nor installation. \nPAT-002  [Security of Patch] The update mechanism shall utilize cryptographically Secure \nmechanisms that assure integrity and authenticity of the firmware or software \nupdate. \nPAT-003  [Update Authorization] When updating, the Device shall verify that the firmware or \nsoftware update was created by an authorized author. \nPAT-004  [Unattended Patching] Devices should provide an option to allow users to choose to \ninstall security patches without further user intervention. \nThe update mechanism may utilize mechanisms which assure confidentiality of the firmware or \nsoftware update. \nFirmware or software updates may be delivered by any appropriate mechanism, including via a \nnetwork and via portable storage Devices (e.g., a USB memory stick). \n5.10  Reprovisioning \n“The ability for authorized users to securely reconfigure and redeploy a device \npost-market, especially to return the product to factory defaults or an authorized \nrestore  point,  and  securely  remove  data  collected  by  the  device  (that  is  not \nessential  to  its  configuration),  within  a  defined  period  established  by  the \norganization.”  See C2 Consensus [16] 5.1.10, definition of Reprovisioning (which \nincludes definition of Deprovisioning). \nWhat is user-specific data will depend on the use case of the Device; however, generally \nlocation information and information that can be personally identified or linked to an individual \nare considered user-specific data. \nREP-001  [Deprovisioning] A deprovisioning procedure that includes Secure Purge or Destroy \noperations (as defined in NIST SP 800-88 Rev.1 [13]), Cryptographic Erasure, or \nphysical removal of the media containing user-specific data shall be provided in a \nplace and manner available to expected customers and users, including those in \nsecondary or resale markets. \nREP-002  [Deprovisioning Period] The deprovisioning procedure shall not be limited by the \ndefined period for reprovisioning.  \nReprovisioning might be limited by a defined period by the Manufacturer; REP-002 \nrequires that a deprovisioning method is always possible even after that period has \nexpired. \n24 \n \nCTA-2088 \nREP-003  [Deprovisioning by Users] The deprovisioning procedure shall be completable by \nDevice owners without the use of specialized hardware. \nREP-004  [Deprovisioning by Resellers or Lessors] A deprovisioning procedure should also be \nprovided to authorized resellers, for example for use in accepting and reselling \nreturns; and to Device Lessors, for example in preparing a leased Device for transfer \nto a subsequent lessee. \nREP-005  [Reprovisioning or Disposal] Either a reprovisioning procedure to restore a Device to \na usable state OR a notice that reprovisioning is not possible and therefore Secure \ndisposal is required shall be provided in Device documentation or on Device \npackaging. \nREP-006  [Effectiveness of Deprovisioning and Reprovisioning] Following the application of any \nManufacturer-specified deprovisioning or reprovisioning procedure, it shall be \ninfeasible to extract from the Device any data pertaining to any previous owner \nusing state-of-the-art laboratory techniques. \nREP-007  [Cryptographic Erasure] Cryptographic Erasure, if used, shall be completed in \naccordance with the procedures and use cases in NIST SP 800-88 Rev.1, section 2.6 \n[13]. \nREP-008  [Physical Media Removal] Physical media removal for deprovisioning and \nreplacement for reprovisioning, if used, shall be performable by the Device owner \nusing only Commonly Available Tools, and without Specialized or Proprietary Tools. \n6  PRODUCT LIFECYCLE MANAGEMENT CAPABILITIES – BASELINE \nThis section has requirements for important capabilities that are in scope for the organization, \nrather than the Device.  Device capabilities are typically observable on a given Device.  These \nproduct lifecycle management capabilities are activities of the manufacturing organization (or \notherwise responsible development organization) that are important in the context of overall \nSecurity of the Device.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.1  Vulnerability Submission and Handling",
      "section_text": "",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.1.1  Definition",
      "section_text": "A defined and managed process for accepting Vulnerability notifications and acting on them.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          1
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.1.2  Requirements",
      "section_text": "VUL-001  [Vulnerability Identification] The Manufacturer shall have a process for ongoing \nidentification of potential vulnerabilities that defines activities such as the \nManufacturer’s participation in industry threat-sharing programs or a mechanism for \naccepting unsolicited notifications of potential vulnerabilities. \n25 \n \nCTA-2088 \nVUL-002  [Vulnerability Contact] The Manufacturer shall have a publicly-stated point of \ncontact for outside reporting of potential vulnerabilities, such as a web page with a \ncontact form or a documented Security email address. \nVUL-003  [Default Vulnerability Contact] As unsolicited Vulnerability reports can be sent to \nsecurity@example.com, where example.com is the Manufacturer's email domain, \nthe Manufacturer should ensure that Vulnerability disclosure messages received at \nthat address are directed to staff responsible for processing Vulnerability \ndisclosures. \nVUL-004  [Vulnerability Handling] The Manufacturer should, upon identification, evaluate a \npotential Vulnerability in terms of risk factors, scope of affected products, \navailability of mitigations, and other factors, and prioritize action accordingly.  \nOrganizations should allocate resources to address identified Vulnerabilities \naccording to that prioritization.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          1
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.2  EoL/EoS Updates and Disclosure",
      "section_text": "",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.2.1  Definition",
      "section_text": "A defined Manufacturer policy covering the handling of any post end-of-life (EoL) or end-of-\nservice (EoS) Device Vulnerabilities, if and how updates will be available, and what to do with \nthe Device at EoL or EoS.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          2
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.2.2  Requirements",
      "section_text": "[Notifications] The Manufacturer shall indicate in a place and manner available \nto customers and users, including those in secondary or resale markets, its policy \non disclosure of, and providing Security updates for, discovered Device \nVulnerabilities, and what to do with the Device at the end of Security updates. \nThis requirement can be met by publishing the EoL/EoS policy on a public-facing web page.  This \ntopic must be considered carefully by the Manufacturer; EoL and EoS policies are connected to \nVulnerability handling, product lifecycle, terms of service and more. \n \n  Guidance for the Secure disposal of removed media should be provided in Device \ndocumentation.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          2
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.3  Device Intent Documentation",
      "section_text": "",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          3
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.3.1  Definition",
      "section_text": "An explanation of the Device’s as-designed network usage that is made available by the \nManufacturer publicly, in product documentation, or other means for Device users. \n26 \n \nCTA-2088",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          3
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "6.3.2  Requirements",
      "section_text": "DIN-001  [Device Intent Documentation] The Manufacturer shall maintain publicly-available \ndocumentation (where the provenance and integrity of the documentation is \nverifiable) of the as-designed intended network usage in normal operation mode, \nincluding websites and/or URLs, and ports. \nDIN-002  [Device Memory Documentation] The Manufacturer shall maintain publicly-available \ndocumentation of the components of the Device that can contain data pertaining to \nthe owner or user, and the types of data that can be stored.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          6
        ],
        [
          "N",
          3
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "7  BIBLIOGRAPHY",
      "section_text": "As noted in the Scope [1], this standard specifies certain Device Security capabilities and related \norganizational Security capabilities and recommendations for Devices and Device systems.  This \nestablishes a ‘baseline’, also as noted in the Scope [1].  A baseline is not a final destination for \nall possible products; it is a common capabilities basis upon which to build for Security \nappropriate to the risk assessment and use case of the Device and its requirements. \nUse case analysis, risk assessment and requirements planning are properly done at the early \nstage of product development.  This standard is directly based on The C2 Consensus on IoT \nDevice Security Baseline Capabilities [16].  Additional resources for product planning include: \n•  NIST NISTIR 8228, Considerations for Managing Internet of Things (IoT) Cybersecurity \nand Privacy Risks, June 2019, https://csrc.nist.gov/publications/detail/nistir/8228/final. \n•  ETSI ‘DTS/CYBER-0039’ Work Item CYBER; Cyber Security for Consumer Internet of \nThings, \nhttps://portal.etsi.org/webapp/WorkProgram/Report_WorkItem.asp?WKI_ID=54761. \n•  DIN SPEC 27072:2019-05, Information Technology - IoT capable devices - Minimum \nrequirements for Information security, https://www.beuth.de/en/technical-rule/din-\nspec-27072/303463577. \n•  GSMA IoT Security Guidelines and Assessment, https://www.gsma.com/iot/iot-\nsecurity/iot-security-guidelines/. \n•  NIST NISTIR 8259, Foundational Cybersecurity Activities for IoT Device Manufacturers, \nMay 2020, https://csrc.nist.gov/publications/detail/nistir/8259/final.  \n•  UK Department for Digital, Culture, Media & Sport, Code of Practice for Consumer IoT \nSecurity, https://www.gov.uk/government/publications/code-of-practice-for-consumer-\niot-security.  \n•  Global Platform, Security Evaluation Standard for IoT Platforms (SESIP) v1.0, \nhttps://globalplatform.org/specs-library/.  \n•  Galen Hunt, George Letey, and Edmund B. Nightingale, Microsoft. The Seven Properties \nof Highly Secure Devices. https://www.microsoft.com/en-us/research/wp-\n27 \n \nCTA-2088 \ncontent/uploads/2017/03/SevenPropertiesofHighlySecureDevices.pdf (accessed \nOctober 27, 2020).",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          7
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "8  REGARDING FUTURE SECURE CAPABILITIES – PHASE IN OVER TIME",
      "section_text": "“The following items are considered significant enough that they should be baseline \ncapabilities.  However, for various reasons they cannot be considered baseline at this time.  \nThe expectation is that they will become baseline and developers should carefully consider \nthe capabilities in their planning.”  See C2 Consensus [16] Annex A, Regarding Future Secure \nCapabilities – Phase in Over Time.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          8
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "8.1  Device Intent Signaling",
      "section_text": "“Means for the device to provide information to routers or firewalls upstream what kind of \ntraffic the device was intended to produce.”  See C2 Consensus [16] A.1, definition of Device \nIntent Signaling.  \nDIS-001  [Security Assessment] Device manufactures should assess their devices using a risk \nmanagement process such as the NIST Cybersecurity Framework [15]. This \nAssessment informs the Security objectives, which in turn inform what specific \nSecurity controls will be employed on the Device. \nDIS-002  [Security Objectives] Device manufacturers should maintain a written description of \nthe Security objectives for each device or device class. \nDIS-003  [Minimum Objectives] Device Security objectives should describe, at minimum, the \nimpact the Device could potentially have on the broader infrastructure in which it \noperates, including how the Devices might be prevented from being used in a botnet \nattack.7 \nDIS-004  [Minimum Controls] The Security controls should address at least the minimum \nSecurity objectives, including how the Device will restrict the volume, destination \nand content of its emitted communications in order to avoid harming the Security of \nthe systems that will relay, process or receive those messages.",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          8
        ],
        [
          "N",
          1
        ]
      ],
      "type": "Numeric"
    },
    {
      "section_title": "8.2  Device Network Onboarding",
      "section_text": "“Network Onboarding” for a Device is the means to enable a network operator or Device \nmanager to cryptographically ensure that a Device, when first attached to a network, is \nidentified, authenticated and authorized. It is the process of Authenticating the Device, \nAuthorizing that Device with Credentials, and configuring it to be able to communicate within \n \n7 Council to Secure the Digital Economy, The C2 Consensus on IoT Device Security Baseline Capabilities [page 8] \n(2019), https://securingdigitaleconomy.org/wp-content/uploads/2019/09/CSDE_IoT-C2-Consensus-\nReport_FINAL.pdf \n28 \n \nCTA-2088 \nthe desired Security domain. Correct identification of the Device, and explicit, non-automated, \napproval from the network manager are both critical to the exchange. \n \nDOB-001  [Bootstrapping Identity] A Device that is not pre-provisioned to a specific \ndeployment should* have a bootstrapping Identity that is intended for use solely for \nbootstrapping purposes.  At a bare minimum, this Identity should* be a \npublic/private key pair and should be an X.509 certificate. \nDOB-002  [Onboarding Mechanism] Devices that require network bootstrapping should* \nemploy a network bootstrapping mechanism that establishes proof to the Device \nthat it belongs on a particular network. \n*It is anticipated that this “should” will become a “shall” when these items become part of the \nBaseline in the future; this information is provided now as a recommendation and for future \nplanning. \n   \n29 \n \nCTA-2088 \nAnnex A.  (Informative) Common Management and Remote Access Protocols \nThe following management and remote access protocols are commonly implemented by \nDevices to allow user, operator and machine-to-machine (M2M) Configuration and firmware \nupgrades over the Internet Protocol (IP). Outdated and Insecure implementations of these \nprotocols are often responsible for allowing a Device to be compromised. \nSpecification  Protocol Name  Responsible  Link \nOrganization \nRFC 3411  Simple Network  IETF  https://tools.ietf.org/html/rfc3411 \nManagement \nProtocol (SNMP) \nRFC 4253  The Secure Shell  IETF  https://tools.ietf.org/html/rfc4253 \n(SSH) Transport \nLayer Protocol \nRFC 6120  Extensible  IETF  https://tools.ietf.org/html/rfc6120 \nMessaging and \nPresence \nProtocol (XMPP) \nRFC 6421  Network  IETF  https://tools.ietf.org/html/rfc6241 \nConfiguration \nProtocol \n(NETCONF) \nRFC 7252  The Constrained  IETF  https://tools.ietf.org/html/rfc7252 \nApplication \nProtocol (CoAP) \nRFC 7540  Hypertext  IETF  https://tools.ietf.org/html/rfc7540 \nTransfer \n  \nProtocol Version \n2 (HTTP/2) \nRFC 8040  RESTCONF  IETF  https://tools.ietf.org/html/rfc8040 \nProtocol \nTR-069  CPE WAN  Broadband  https://www.broadband-\nManagement  Forum (BBF)  forum.org/technical/download/TR-069.pdf \nProtocol \n(CWMP) \nTR-369  User Services  Broadband  https://usp.technology/specification/ \nPlatform (USP)  Forum (BBF) \n \nLwM2M  Lightweight  Open Mobile  http://openmobilealliance.org/release/LightweightM2M \nM2M (LwM2M)  Alliance \n \n(OMA) \nMQTT  MQTT Version 5  OASIS  https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-\nv5.0.html \n \n30 \n \n \n \n \nConsumer Technology Association Document Improvement Proposal \nIf in the review or use of this document a potential change is made evident for safety, health or \ntechnical reasons, please email your reason/rationale for the recommended change to \nstandards@CTA.tech.  \n \nConsumer Technology Association \nTechnology & Standards Department \n1919 S Eads Street, Arlington, VA 22202 \nFAX: (703) 907-7693 standards@CTA.tech",
      "page_number": -1,
      "images": [],
      "structure": [
        [
          "N",
          8
        ],
        [
          "N",
          2
        ]
      ],
      "type": "Numeric"
    }
  ]
}